{"componentChunkName":"component---src-templates-blog-post-js","path":"/bash-function-for-git-squash/","result":{"data":{"site":{"id":"Site","siteMetadata":{"title":"Ayan's Blog"}},"markdownRemark":{"id":"3a41333f-1d6e-5e43-8bfb-64d88f77c2a1","excerpt":"cover-image-for-git-squash Cover photo by Moritz Kindler on Unsplash I often find myself squashing a lot of unnecessary commits. The usual way to do this is by…","html":"<p><img src=\"../../static/blog/bash-function-for-git-squash/clock.jpg\" alt=\"cover-image-for-git-squash\"></p>\n<p><small><i><span>Cover photo by <a href=\"https://unsplash.com/@moritz_photography?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Moritz Kindler</a> on <a href=\"/s/photos/clock?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a></span></i></small></p>\n<p>I often find myself squashing a lot of unnecessary commits. The usual way to do this is by using <code class=\"language-text\">rebase</code> or <code class=\"language-text\">soft reset</code>. I personally prefer to use <code class=\"language-text\">soft reset</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token comment\"># soft reset some commits</span>\n<span class=\"token function\">git</span> reset --soft HEAD~2\n<span class=\"token function\">git</span> commit -m <span class=\"token string\">\"Commit message\"</span></code></pre></div>\n<p>As you can see the process is rather long. So how we can save some precious seconds … enter bash functions!</p>\n<p>Add this function to your <code class=\"language-text\">.bashrc</code> file:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token keyword\">function</span> <span class=\"token function-name function\">sq</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> -z <span class=\"token string\">\"<span class=\"token variable\">$1</span>\"</span> <span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">then</span>\n        <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"First argument required\"</span>\n        <span class=\"token builtin class-name\">return</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">fi</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> -z <span class=\"token string\">\"<span class=\"token variable\">$2</span>\"</span> <span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">then</span>\n        <span class=\"token assign-left variable\">message</span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">git</span> log --pretty<span class=\"token operator\">=</span>format:<span class=\"token string\">\"%B\"</span> -1<span class=\"token variable\">)</span></span>\"</span>\n    <span class=\"token keyword\">else</span>\n        <span class=\"token assign-left variable\">message</span><span class=\"token operator\">=</span><span class=\"token variable\">$2</span>\n    <span class=\"token keyword\">fi</span>\n    <span class=\"token function\">git</span> reset --soft HEAD~<span class=\"token variable\">$1</span>\n    <span class=\"token function\">git</span> commit -m <span class=\"token string\">\"<span class=\"token variable\">$message</span>\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And then run <code class=\"language-text\">source ~/.bashrc</code>.</p>\n<h2>Usage</h2>\n<p>If you want to squash <code class=\"language-text\">2</code> commits with the commit message <code class=\"language-text\">Add tests</code>, run this: <code class=\"language-text\">sq 2 &quot;Add tests&quot;</code>.</p>\n<p>More often than not we want the commit message of the squashed commit to be the same as the recent most commit message. In those cases, simply run <code class=\"language-text\">sq 2</code> if you want to squash 2 commits.</p>\n<p>I hope that you have learned something useful from this post and save some seconds of your development time! Let me know if something is not clear.</p>\n<p><em>This post was originally published on <a href=\"https://dev.to/ayanb/bash-function-for-git-squash-lno\">Dev</a>.</em></p>","frontmatter":{"title":"Bash Function for Git Squash","date":"June 25, 2020","description":"Aka save seconds of your development time!"}}},"pageContext":{"slug":"/bash-function-for-git-squash/","previous":{"fields":{"slug":"/resume-generator/"},"frontmatter":{"title":"Generate a LaTeX Resume in Minutes"}},"next":null}}}